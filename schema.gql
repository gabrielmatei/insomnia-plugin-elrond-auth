# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AggregateValue {
  time: String
  first: Float
  last: Float
  min: Float
  max: Float
  count: Float
  sum: Float
  avg: Float
}

type ThresholdCountModel {
  count_gt_0(input: QueryInput!): [AggregateValue!]
  count_gt_0_1(input: QueryInput!): [AggregateValue!]
  count_gt_1(input: QueryInput!): [AggregateValue!]
  count_gt_10(input: QueryInput!): [AggregateValue!]
  count_gt_100(input: QueryInput!): [AggregateValue!]
  count_gt_1000(input: QueryInput!): [AggregateValue!]
  count_gt_10000(input: QueryInput!): [AggregateValue!]
  count_24h(input: QueryInput!): [AggregateValue!]
}

input QueryInput {
  aggregate: Aggregate
  aggregates: [Aggregate!]
  resolution: TimeResolutions
  range: TimeRange
  start_date: DateTime
  end_date: DateTime
}

enum Aggregate {
  FIRST
  LAST
  MIN
  MAX
  COUNT
  SUM
  AVG
}

enum TimeResolutions {
  HOUR
  DAY
}

enum TimeRange {
  HOUR
  DAY
  WEEK
  MONTH
  YEAR
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AccountsModel {
  count(input: QueryInput!): [AggregateValue!]!
  count_24h(input: QueryInput!): [AggregateValue!]!
  active_accounts(input: QueryInput!): [AggregateValue!]
  balance: ThresholdCountModel
  delegation_legacy_active: ThresholdCountModel!
  delegation: ThresholdCountModel
  total_balance_with_stake: ThresholdCountModel!
  total_stake: ThresholdCountModel!
}

type ContractsModel {
  count(input: QueryInput!): [AggregateValue!]!
  count_24h(input: QueryInput!): [AggregateValue!]!
  active_contracts(input: QueryInput!): [AggregateValue!]!
  transfers(input: QueryInput!): [AggregateValue!]
}

type EconomicsModel {
  total_supply(input: QueryInput!): [AggregateValue!]!
  circulating_supply(input: QueryInput!): [AggregateValue!]!
  floating_supply(input: QueryInput!): [AggregateValue!]!
  staked(input: QueryInput!): [AggregateValue!]!
  left_per_user(input: QueryInput!): [AggregateValue!]!
}

type ExchangeModel {
  balance(input: QueryInput!): [AggregateValue!]!
  total(input: QueryInput!): [AggregateValue!]!
  inflows(input: QueryInput!): [AggregateValue!]!
  outflows(input: QueryInput!): [AggregateValue!]!
  inflow_24h(input: QueryInput!): [AggregateValue!]!
  outflow_24h(input: QueryInput!): [AggregateValue!]!
}

type ExchangesModel {
  total: ExchangeModel!
  binance_com: ExchangeModel!
  binance_us: ExchangeModel!
  bitfinex: ExchangeModel!
  bithumb: ExchangeModel!
  bitmax: ExchangeModel!
  crypto_com: ExchangeModel!
  kucoin: ExchangeModel!
  liquid: ExchangeModel!
  okex: ExchangeModel!
}

type GithubActivityModel {
  commits(input: QueryInput!): [AggregateValue!]
  commits_24h(input: QueryInput!): [AggregateValue!]
  contributors(input: QueryInput!): [AggregateValue!]
  stars(input: QueryInput!): [AggregateValue!]
}

type GithubModel {
  total: GithubActivityModel
  featured: GithubActivityModel
  repository(repository: FeaturedRepository!): GithubActivityModel
}

enum FeaturedRepository {
  WASM_VM
  ELROND_GO
  ELROND_PROXY_GO
  ELROND_SDK
}

type KeywordModel {
  clicks(input: QueryInput!): [AggregateValue!]
  impressions(input: QueryInput!): [AggregateValue!]
  ctr(input: QueryInput!): [AggregateValue!]
  position(input: QueryInput!): [AggregateValue!]
}

type GoogleModel {
  total: KeywordModel!
  keyword(keyword: GoogleKeywords!): KeywordModel!
}

enum GoogleKeywords {
  ELROND
  EGLD
  EGOLD
}

type MaiarDexPoolModel {
  name: String
  volume(input: QueryInput!): [AggregateValue!]
}

type MaiarDexModel {
  total_value_locked(input: QueryInput!): [AggregateValue!]
  volume(input: QueryInput!): [AggregateValue!]
  mex_burnt(input: QueryInput!): [AggregateValue!]
  pool(pair: MaiarDexPairs!): MaiarDexPoolModel!
  pools: [MaiarDexPoolModel!]!
}

enum MaiarDexPairs {
  WEGLDUSDC
  WEGLDRIDE
  WEGLDMEX
  AEROWEGLD
  ISETWEGLD
}

type MaiarModel {
  count(input: QueryInput!): [AggregateValue!]!
  count_24h(input: QueryInput!): [AggregateValue!]!
}

type NftsModel {
  count(input: QueryInput!): [AggregateValue!]!
  count_24h(input: QueryInput!): [AggregateValue!]!
  active_nfts(input: QueryInput!): [AggregateValue!]
  transfers(input: QueryInput!): [AggregateValue!]
}

type CoinPriceModel {
  current_price(input: QueryInput!): [AggregateValue!]!
  market_cap(input: QueryInput!): [AggregateValue!]!
  high_24h(input: QueryInput!): [AggregateValue!]!
}

type PricesModel {
  egld_usd: CoinPriceModel!
  egld_eur: CoinPriceModel!
  egld_btc: CoinPriceModel!
  egld_eth: CoinPriceModel!
}

type CoinQuoteModel {
  price(input: QueryInput!): [AggregateValue!]
  market_cap(input: QueryInput!): [AggregateValue!]!
  volume_24h(input: QueryInput!): [AggregateValue!]!
}

type QuotesModel {
  egld: CoinQuoteModel
  btc: CoinQuoteModel
  eth: CoinQuoteModel
  bnb: CoinQuoteModel
  busd: CoinQuoteModel
  usdc: CoinQuoteModel
}

type StakingTypeModel {
  value(input: QueryInput!): [AggregateValue!]
  users(input: QueryInput!): [AggregateValue!]
  user_average(input: QueryInput!): [AggregateValue!]!
}

type StakingModel {
  total: StakingTypeModel
  staking: StakingTypeModel
  delegation: StakingTypeModel
  legacy_delegation: StakingTypeModel
  legacy_delegation_active: StakingTypeModel
  legacy_delegation_waiting_list: StakingTypeModel
}

type TokensModel {
  count(input: QueryInput!): [AggregateValue!]!
  count_24h(input: QueryInput!): [AggregateValue!]!
  active_tokens(input: QueryInput!): [AggregateValue!]
  transfers(input: QueryInput!): [AggregateValue!]
}

type TransactionsModel {
  count(input: QueryInput!): [AggregateValue!]!
  count_24h(input: QueryInput!): [AggregateValue!]!
  value_moved(input: QueryInput!): [AggregateValue!]!
  total_fees(input: QueryInput!): [AggregateValue!]!
  new_emission(input: QueryInput!): [AggregateValue!]!
}

type TrendsModel {
  google(input: QueryInput!): [AggregateValue!]!
}

type TwitterModel {
  mentions(input: QueryInput!): [AggregateValue!]!
  followers(input: QueryInput!): [AggregateValue!]!
}

type Query {
  accounts: AccountsModel!
  contracts: ContractsModel!
  economics: EconomicsModel!
  exchanges: ExchangesModel!
  github: GithubModel!
  google: GoogleModel!
  maiar: MaiarModel!
  maiar_dex: MaiarDexModel!
  nfts: NftsModel!
  prices: PricesModel!
  quotes: QuotesModel!
  staking: StakingModel!
  tokens: TokensModel!
  transactions: TransactionsModel!
  trends: TrendsModel!
  twitter: TwitterModel!
}